variables:
  # Use the same base image as benchmarks as we know it should be able to build the fuzzers
  BASE_CI_IMAGE: 486234852809.dkr.ecr.us-east-1.amazonaws.com/ci/benchmarking-platform:libddwaf

run-fuzzing:
  stage: fuzzing
  when: manual
  tags: ["runner:apm-k8s-tweaked-metal"]
  image: $BASE_CI_IMAGE
  timeout: 30m
  before_script: |
    VAULT_VERSION=1.20.1
    wget https://releases.hashicorp.com/vault/${VAULT_VERSION}/vault_${VAULT_VERSION}_linux_amd64.zip
    unzip vault_${VAULT_VERSION}_linux_amd64.zip
    mv vault /usr/bin/vault
    chmod +x /usr/bin/vault
    export PATH=/usr/bin:$PATH

    # TODO: MOVE THIS TO THE BASE IMAGE BUILD

    wget -O - https://apt.llvm.org/llvm-snapshot.gpg.key | apt-key add -
    echo 'deb http://apt.llvm.org/jammy/ llvm-toolchain-jammy-19 main' | tee /etc/apt/sources.list.d/llvm-toolchain.list
    apt-get update

    # Install dependencies matching your Dockerfile
    apt-get install -y \
      build-essential cmake git curl python3 python3-pip \
      llvm-19 llvm-19-dev llvm-19-tools clang-19 lld-19 \
      libc++-19-dev libc++abi-19-dev ninja-build \
      libssl-dev libcurl4-openssl-dev zlib1g-dev xxd

    # Set up clang alternatives
    update-alternatives --install /usr/bin/clang clang /usr/bin/clang-19 100
    update-alternatives --install /usr/bin/clang++ clang++ /usr/bin/clang++-19 100
    update-alternatives --install /usr/bin/llvm-config llvm-config /usr/bin/llvm-config-19 100
    update-alternatives --install /usr/bin/llvm-cov llvm-cov /usr/bin/llvm-cov-19 100
    update-alternatives --install /usr/bin/llvm-ar llvm-ar /usr/bin/llvm-ar-19 100

    # Install AFL++
    git clone https://github.com/AFLplusplus/AFLplusplus.git /tmp/AFLplusplus
    cd /tmp/AFLplusplus
    git checkout b89727bea903aec80d003b6764fb53c232d33d95
    make -j$(nproc) all
    make install

    # Install afl-cov-fast
    git clone --recursive https://github.com/airbus-seclab/afl-cov-fast.git /opt/afl-cov-fast
    cd /opt/afl-cov-fast
    git checkout 7a96b578bb227e874bf75f8cb759e8ac2b180453
    pip3 install -r requirements.txt

  script: |
    # TODO: figure out what's the actual path to the source code instead of hardcoding it?
    # Copy source code to /workspace where the build scripts expect it
    mv /go/src/github.com/DataDog/apm-reliability/libddwaf /workspace
    cd /workspace
    echo "Starting fuzzing infrastructure setup..."
    echo "Current commit: $CI_COMMIT_SHA"
    echo "Current branch: $CI_COMMIT_REF_NAME"
    echo "Current working directory: $(pwd)"
    ls -la
    python3 -m pip install requests
    python3 /workspace/ci/scripts/fuzz_infra.py
    echo "âœ… Fuzzing setup completed successfully"

  # Only run on certain conditions to avoid wasting resources
  # only:
  #   refs:
  #     - master
