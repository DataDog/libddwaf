name: Test

on:
  push:
    branches: [ master ]
    tags:
      - "*"
  pull_request:
    branches:
      - "**"
  schedule:
    - cron:  30 0 * * *
  workflow_dispatch:
concurrency:
  group: ${{ github.workflow }}-${{ github.event.pull_request.number || github.ref }}
  cancel-in-progress: true
jobs:
  sanitizers:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
        with:
          submodules: recursive

      - name: Create directories
        run: mkdir Debug

      - name: CMake
        env:
          CC: gcc-9
          CXX: g++-9
        run: |
          cmake .. -DCMAKE_BUILD_TYPE=Debug \
            -DCMAKE_CXX_FLAGS="-fsanitize=address,leak,undefined -DASAN_BUILD" \
            -DCMAKE_C_FLAGS="-fsanitize=address,leak,undefined -DASAN_BUILD" \
            -DCMAKE_EXE_LINKER_FLAGS="-fsanitize=address,leak,undefined" \
            -DCMAKE_MODULE_LINKER_FLAGS="-fsanitize=address,leak,undefined"
        working-directory: Debug

      - name: Build
        run: VERBOSE=1 make -j $(nproc) testPowerWAF
        working-directory: Debug

      - name: Test
        run: |
          ASAN_OPTIONS="verbosity=1 fast_unwind_on_malloc=0 detect_leaks=1" \
            LD_PRELOAD=/usr/lib/x86_64-linux-gnu/libasan.so.5 \
            make test
        working-directory: Debug

  valgrind:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
        with:
          submodules: recursive

      - name: Install dependencies
        run: sudo apt update ; sudo apt install -y valgrind

      - name: Create directories
        run: mkdir Debug

      - name: CMake
        env:
          CC: gcc-9
          CXX: g++-9
        run: |
          cmake .. -DCMAKE_BUILD_TYPE=Debug
        working-directory: Debug

      - name: Build
        run: VERBOSE=1 make -j $(nproc) testPowerWAF
        working-directory: Debug

      - name: Test
        run: make test_valgrind
        working-directory: Debug

  coverage:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
        with:
          submodules: recursive

      - name: Install dependencies
        run: sudo apt update ; sudo apt install -y gcovr

      - name: Create directories
        run: mkdir Debug

      - name: CMake
        env:
          CC: gcc-9
          CXX: g++-9
        run: |
          cmake .. -DLIBDDWAF_TEST_COVERAGE=ON -DCMAKE_BUILD_TYPE=Debug
        working-directory: Debug

      - name: Build
        run: VERBOSE=1 make -j $(nproc) testPowerWAF
        working-directory: Debug

      - name: Test
        run: make test
        working-directory: Debug

      - name: Generate coverage
        run: gcovr -f '.*src.*' -x -d -o coverage.xml
        working-directory: Debug

      - name: Submit coverage
        uses: codecov/codecov-action@v3
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          flags: waf_test
          verbose: true
          files: coverage.xml

  validate:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
        with:
          submodules: recursive

      - name: Create directories
        run: mkdir Debug

      - name: CMake
        env:
          CC: gcc-9
          CXX: g++-9
        run: |
          cmake .. -DCMAKE_BUILD_TYPE=Debug \
            -DCMAKE_CXX_FLAGS="-fsanitize=address,leak,undefined -DASAN_BUILD" \
            -DCMAKE_C_FLAGS="-fsanitize=address,leak,undefined -DASAN_BUILD" \
            -DCMAKE_EXE_LINKER_FLAGS="-fsanitize=address,leak,undefined" \
            -DCMAKE_MODULE_LINKER_FLAGS="-fsanitize=address,leak,undefined"
        working-directory: Debug

      - name: Build
        run: VERBOSE=1 make -j $(nproc) waf_validator
        working-directory: Debug

      - name: Test Validator
        run: make test_validator
        working-directory: Debug

      - name: Test WAF
        run: make validate
        working-directory: Debug
  lint:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
        with:
          submodules: recursive

      - name: Create directories
        run: mkdir Debug

      - name: Install clang-{tidy,format}
        run: |
          sudo .github/workflows/scripts/llvm.sh 15
          sudo apt-get install -y clang-tidy-15 clang-format-15

      - name: CMake
        env:
          CXX: clang++-15
          CC: clang-15
        run: |
          cmake .. -DCMAKE_BUILD_TYPE=Debug -DCLANG_TIDY=/usr/bin/run-clang-tidy-15 \
            -DCLANG_FORMAT=/usr/bin/clang-format-15
        working-directory: Debug

      - name: Build
        run: VERBOSE=1 make -j $(nproc)
        working-directory: Debug

      - name: Format
        run: make format
        working-directory: Debug

      - name: Tidy
        run: make tidy || true
        working-directory: Debug
