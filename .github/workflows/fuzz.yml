name: Fuzz

on:
  pull_request:
    branches:
      - "**"
  push:
    branches: [master]
    tags:
      - "*"
  schedule:
    - cron: 30 0 * * *
  workflow_dispatch:
    inputs:
      duration:
        description: "Duration of the fuzzing run in seconds"
        required: true
        default: "60"
        type: string
concurrency:
  group: ${{ github.workflow }}-${{ github.event.pull_request.number || github.ref }}
  cancel-in-progress: true

jobs:
  build:
    runs-on: ubuntu-latest
    outputs:
      fuzzers: ${{ steps.list-fuzzers.outputs.fuzzers }}
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: recursive

      - name: Install AFL++ and dependencies
        run: |
          sudo .github/workflows/scripts/llvm.sh 19
          sudo apt-get install -y build-essential cmake git curl python3 python3-pip ninja-build libssl-dev libcurl4-openssl-dev zlib1g-dev xxd

      - name: Install AFL++
        run: |
          git clone https://github.com/AFLplusplus/AFLplusplus.git /tmp/AFLplusplus
          cd /tmp/AFLplusplus
          git checkout b89727bea903aec80d003b6764fb53c232d33d95
          make -j$(nproc) all
          sudo make install

      - name: Install afl-cov-fast
        run: |
          git clone --recursive https://github.com/airbus-seclab/afl-cov-fast.git /opt/afl-cov-fast
          cd /opt/afl-cov-fast
          git checkout 7a96b578bb227e874bf75f8cb759e8ac2b180453
          pip3 install -r requirements.txt

      - name: Create workspace and build
        env:
          CC: afl-clang-lto
          CXX: afl-clang-lto++
          AFL_USE_ASAN: 1
        run: |
          # Create /workspace and copy everything there
          sudo mkdir -p /workspace
          sudo cp -r . /workspace/
          sudo chown -R $(whoami):$(whoami) /workspace
          cd /workspace

          # Run the build script logic directly
          python3 fuzzer/global/scripts/build_corpus.py

          mkdir -p build
          cd build
          cmake .. \
            -DCMAKE_BUILD_TYPE=Debug \
            -DCMAKE_C_FLAGS="-fsanitize=address -fno-omit-frame-pointer -O3 -g -fprofile-instr-generate -fcoverage-mapping" \
            -DCMAKE_CXX_FLAGS="-fsanitize=address -fno-omit-frame-pointer -O3 -g -fprofile-instr-generate -fcoverage-mapping"
          make -j$(nproc)

          cd ../fuzzer
          mkdir -p build
          cd build
          cmake .. \
            -DCMAKE_BUILD_TYPE=Debug \
            -DLIBDDWAF_BUILD_FUZZER=ON \
            -DCMAKE_C_FLAGS="-fsanitize=address -fno-omit-frame-pointer -O3 -g -fprofile-instr-generate -fcoverage-mapping" \
            -DCMAKE_CXX_FLAGS="-fsanitize=address -fno-omit-frame-pointer -O3 -g -fprofile-instr-generate -fcoverage-mapping"
          make -j$(nproc)

      - name: List available fuzzers
        id: list-fuzzers
        run: |
          fuzzers=$(grep -A 20 "ALL_FUZZERS=(" fuzzer/docker/run_fuzzers.sh | grep -E '^\s*"[^"]*"' | sed 's/.*"\([^"]*\)".*/\1/' | jq -R -s -c 'split("\n")[:-1]')
          echo "fuzzers=$fuzzers" >> $GITHUB_OUTPUT
          echo "Found fuzzers: $fuzzers"

      - name: Package AFL++ and coverage tools
        run: |
          # Create AFL++ package
          mkdir -p /tmp/afl-package/bin
          mkdir -p /tmp/afl-package/opt

          # Package AFL++ binaries
          cp /usr/local/bin/afl-* /tmp/afl-package/bin/ 2>/dev/null || true
          cp /opt/AFLplusplus/afl-* /tmp/afl-package/bin/ 2>/dev/null || true

          # Package afl-cov-fast
          cp -r /opt/afl-cov-fast /tmp/afl-package/opt/

          echo "AFL++ binaries:"
          ls -la /tmp/afl-package/bin/
          echo "Coverage tools:"
          ls -la /tmp/afl-package/opt/

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: fuzzer-binaries
          path: |
            /workspace/fuzzer/build/*_fuzz
            /workspace/build/
            /workspace/fuzzer/global/scripts/
          retention-days: 1

      - name: Upload AFL++ binaries
        uses: actions/upload-artifact@v4
        with:
          name: afl-binaries
          path: /tmp/afl-package/
          retention-days: 1

  fuzzing:
    needs: build
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        fuzzer: ${{ fromJson(needs.build.outputs.fuzzers) }}
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: recursive

      - name: Install runtime dependencies
        run: |
          # Install only runtime dependencies (no build tools needed)
          sudo .github/workflows/scripts/llvm.sh 19

      - name: Download AFL++ binaries
        uses: actions/download-artifact@v4
        with:
          name: afl-binaries
          path: /tmp/afl-package

      - name: Install AFL++ binaries and coverage tools
        run: |
          # Install AFL++ binaries
          sudo cp /tmp/afl-package/bin/* /usr/local/bin/
          sudo chmod +x /usr/local/bin/afl-*

          # Install afl-cov-fast
          sudo cp -r /tmp/afl-package/opt/afl-cov-fast /opt/
          cd /opt/afl-cov-fast
          pip3 install -r requirements.txt

          afl-fuzz --help || echo "AFL++ installed successfully"

      - name: Setup workspace and download artifacts
        run: |
          sudo mkdir -p /workspace
          sudo cp -r . /workspace/
          sudo chown -R $(whoami):$(whoami) /workspace
          sudo chown -R $(whoami):$(whoami) /opt

      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: fuzzer-binaries
          path: /workspace

      - name: Run fuzzer
        env:
          AFL_SKIP_CPUFREQ: 1
          AFL_I_DONT_CARE_ABOUT_MISSING_CRASHES: 1
          AFL_FAST_CAL: 1
        run: |
          cd /workspace
          chmod +x fuzzer/build/*_fuzz 2>/dev/null || true
          ./fuzzer/docker/run_fuzzers.sh ${{ matrix.fuzzer }}
