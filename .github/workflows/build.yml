name: Build

on:
  push:
    branches: [ master ]
    tags:
      - "*"
  pull_request:
    branches:
      - "**"
  schedule:
    - cron:  30 0 * * *
jobs:
  windows-builds:
    runs-on: windows-2019
    strategy:
      fail-fast: false
      matrix:
        arch:
          - Win32
          - x64
    steps:
      - uses: actions/checkout@v3
        with:
          submodules: recursive
      - uses: ilammy/msvc-dev-cmd@v1
      - name: Create Directories
        run: cmake -E make_directory ${{ github.workspace }}/build ${{ github.workspace }}/packages
      - name: Generating Build Scripts
        run: cmake -DCMAKE_BUILD_TYPE=RelWithDebInfo -DLIBDDWAF_PACKAGE_PROCESSOR=${{ matrix.arch }} -DCMAKE_INSTALL_PREFIX=${{ github.workspace }} -DCPACK_PACKAGE_DIRECTORY=${{ github.workspace }}/packages ${{ github.workspace }} -A ${{ matrix.arch }}
        working-directory: ${{ github.workspace }}/build
      - name: Build
        run: cmake --build . --target package --config RelWithDebInfo --verbose --target libddwaf_shared --target libddwaf_static --target tests/testPowerWAF -j
        working-directory: ${{ github.workspace }}/build
      - name: Test
        run: ${{ github.workspace }}/build/tests/testPowerWAF
        working-directory: ${{ github.workspace }}/tests
      - name: Remove Temporary Files
        run: cmake -E remove_directory _CPack_Packages
        working-directory: ${{ github.workspace }}/packages
      - name: Generate Package sha256
        working-directory: ${{ github.workspace }}/packages
        run: for file in *.tar.gz; do sha256sum "$file" > "$file.sha256"; done
        shell: bash
      - uses: actions/upload-artifact@v3
        with:
          name: libddwaf-windows-${{ matrix.arch }}
          path: |
            ${{ github.workspace }}/packages/*.tar.gz
            ${{ github.workspace }}/packages/*.sha256

  macos-build:
    runs-on: macos-11
    steps:
      - uses: actions/checkout@v3
        with:
          submodules: recursive
      - name: Create Build Directory
        run: cmake -E make_directory ${{ github.workspace }}/build ${{ github.workspace }}/packages
      - name: Generating Build Scripts
        run: cmake -DCMAKE_BUILD_TYPE=RelWithDebInfo -DMACOSX_DEPLOYMENT_TARGET=10.9 -DCMAKE_INSTALL_PREFIX=${{ github.workspace }} -DCPACK_PACKAGE_DIRECTORY=${{ github.workspace }}/packages ${{ github.workspace }}
        working-directory: ${{ github.workspace }}/build
      - name: Build Binaries
        run: cmake --build . --config RelWithDebInfo --verbose --target all --target testPowerWAF -j
        working-directory: ${{ github.workspace }}/build
      - name: Test
        run: ${{ github.workspace }}/build/tests/testPowerWAF
        working-directory: ${{ github.workspace }}/tests
      - name: Build Packages
        run: cmake --build . --target package --config RelWithDebInfo --verbose
        working-directory: ${{ github.workspace }}/build
      - name: Remove Temporary Files
        run: cmake -E remove_directory _CPack_Packages
        working-directory: ${{ github.workspace }}/packages
      - name: Generate Package sha256
        working-directory: ${{ github.workspace }}/packages
        run: for file in *.tar.gz; do shasum -a 256 "$file" > "$file.sha256"; done
      - uses: actions/upload-artifact@v3
        with:
          name: libddwaf-macos-x86_64
          path: |
            ${{ github.workspace }}/packages/*.tar.gz
            ${{ github.workspace }}/packages/*.sha256

  macos-cross-build:
    runs-on: macos-11
    steps:
      - uses: actions/checkout@v3
        with:
          submodules: recursive
      - name: Create Build Directory
        run: cmake -E make_directory ${{ github.workspace }}/build ${{ github.workspace }}/packages
      - name: Generating Build Scripts
        run: cmake -DCMAKE_OSX_ARCHITECTURES=arm64 -DCMAKE_BUILD_TYPE=RelWithDebInfo -DMACOSX_DEPLOYMENT_TARGET=10.9 -DCMAKE_INSTALL_PREFIX=${{ github.workspace }} -DCPACK_PACKAGE_DIRECTORY=${{ github.workspace }}/packages ${{ github.workspace }}
        working-directory: ${{ github.workspace }}/build
      - name: Build Binaries
        run: cmake --build . --config RelWithDebInfo --verbose --target all -j
        working-directory: ${{ github.workspace }}/build
      - name: Build Packages
        run: cmake --build . --target package --config RelWithDebInfo --verbose
        working-directory: ${{ github.workspace }}/build
      - name: Remove Temporary Files
        run: cmake -E remove_directory _CPack_Packages
        working-directory: ${{ github.workspace }}/packages
      - name: Generate Package sha256
        working-directory: ${{ github.workspace }}/packages
        run: for file in *.tar.gz; do shasum -a 256 "$file" > "$file.sha256"; done
      - uses: actions/upload-artifact@v3
        with:
          name: libddwaf-macos-arm64
          path: |
            ${{ github.workspace }}/packages/*.tar.gz
            ${{ github.workspace }}/packages/*.sha256

  docker-builds:
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        target:
          - name: mingw64
            dockerfile: docker/libddwaf/gcc/mingw64/Dockerfile
            package: libddwaf-linux-mingw64
          - name: aarch64
            qemu_action_arch: arm64
            dockerfile: docker/libddwaf/aarch64/Dockerfile
            check_script: docker/libddwaf/aarch64/check
            package: libddwaf-linux-aarch64
          - name: x86_64
            qemu_action_arch: amd64
            dockerfile: docker/libddwaf/x86_64/Dockerfile
            check_script: docker/libddwaf/x86_64/check
            package: libddwaf-linux-x86_64
    steps:
      - uses: actions/checkout@v3
        with:
          submodules: recursive
      - uses: docker/setup-buildx-action@v2
        id: buildx
        with:
          install: true
      - uses: docker/setup-qemu-action@v2
        if: matrix.target.qemu_action_arch == 'arm64'
        with:
          platforms: ${{ matrix.target.qemu_action_arch }}
      - run: docker build -f ${{ matrix.target.dockerfile }} -o /tmp/packages .
      - run: ${{ matrix.target.check_script }}
        if: matrix.target.check_script
        name: Invoke check script
      - name: Generate Package sha256
        working-directory: /tmp/packages
        run: for file in *.tar.gz; do sha256sum "$file" > "$file.sha256"; done
      - uses: actions/upload-artifact@v3
        with:
          name: ${{ matrix.target.package }}
          path: |
            /tmp/packages/*.tar.gz
            /tmp/packages/*.sha256

  package-nuget:
    needs: [ windows-builds, macos-build, macos-cross-build, docker-builds ]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - uses: nuget/setup-nuget@v1
        with:
          nuget-version: '5.x'

      - uses: actions/download-artifact@v3
        with:
          path: artifacts

      - name: Display structure of downloaded files
        run: find

      - name: Package Nuget
        run: |
          sudo apt-get update && sudo apt-get install -y libarchive-tools
          function extract_file {
            local -r arch=$1 filepat=$2 dest=$3
            local -r file_in_arch=$(bsdtar -tf "$arch" | grep "$filepat" | head -1)
            bsdtar -xOf "$arch" "$file_in_arch" > "$dest"/"$(basename "$file_in_arch")"
          }

          mkdir -p ./packages/nuget/runtimes/{linux-x64,linux-arm64,osx-x64,osx-arm64,win-x86,win-x64}/native

          extract_file ./artifacts/libddwaf-linux-x86_64/libddwaf-*-linux-x86_64*.tar.gz \
            '/libddwaf\.so$' ./packages/nuget/runtimes/linux-x64/native
          extract_file ./artifacts/libddwaf-linux-aarch64/libddwaf-*-linux-aarch64*.tar.gz \
            '/libddwaf\.so$' ./packages/nuget/runtimes/linux-arm64/native
          extract_file ./artifacts/libddwaf-macos-x86_64/libddwaf-*-darwin-x86_64*.tar.gz \
            '/libddwaf\.dylib$' ./packages/nuget/runtimes/osx-x64/native
          extract_file ./artifacts/libddwaf-macos-arm64/libddwaf-*-darwin-arm64*.tar.gz \
            '/libddwaf\.dylib$' ./packages/nuget/runtimes/osx-arm64/native
          extract_file ./artifacts/libddwaf-windows-Win32/libddwaf-*-windows-win32*.tar.gz \
            '/ddwaf\.dll$' ./packages/nuget/runtimes/win-x86/native
          extract_file ./artifacts/libddwaf-windows-x64/libddwaf-*-windows-x64*.tar.gz \
            '/ddwaf\.dll$' ./packages/nuget/runtimes/win-x64/native

          # create nuget
          version=`cat ./version`
          echo Version is: $version

          mkdir output-packages
          nuget pack ./packages/nuget/libddwaf.nuspec -Version $version -OutputDirectory ./output-packages

      - name: Generate Package sha256
        working-directory: ${{ github.workspace }}/output-packages
        run: for file in *.nupkg; do sha256sum "$file" > "$file.sha256"; done

      - uses: actions/upload-artifact@v3
        with:
          name: nuget
          path: ${{ github.workspace }}/output-packages

  release:
    needs: [ windows-builds, macos-build, macos-cross-build, docker-builds, package-nuget]
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/')
    steps:
      - uses: actions/checkout@v3
      - uses: actions/download-artifact@v3
        with:
          path: artifacts
      - name: Display structure of downloaded files
        run: find
      - name: Release
        uses: softprops/action-gh-release@v1
        with:
          draft: true
          files: |
            ./artifacts/**/*.tar.gz
            ./artifacts/**/*.sha256
            ./artifacts/**/*.nupkg
