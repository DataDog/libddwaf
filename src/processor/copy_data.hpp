// Unless explicitly stated otherwise all files in this repository are
// dual-licensed under the Apache-2.0 License or BSD-3-Clause License.
//
// This product includes software developed at Datadog (https://www.datadoghq.com/).
// Copyright 2021 Datadog, Inc.

#include <cstdlib>
#include <cstring>
#include <string_view>

#include "processor/base.hpp"

namespace ddwaf {

class copy_data_processor : public structured_processor<copy_data_processor> {
public:
    static constexpr std::array<std::string_view, 1> param_names{"input"};

    copy_data_processor(std::string id, std::shared_ptr<expression> expr,
        std::vector<processor_mapping> mappings, bool evaluate, bool output)
        : structured_processor(
              std::move(id), std::move(expr), std::move(mappings), evaluate, output)
    {}

    // NOLINTNEXTLINE(readability-convert-member-functions-to-static)
    std::pair<ddwaf_object, object_store::attribute> eval_impl(
        const unary_argument<const ddwaf_object *> &input, processor_cache & /*cache*/,
        ddwaf::timer & /*deadline*/) const
    {
        if (input.value == nullptr) {
            return {};
        }

        // Objects generated by this post-processors must always be non-ephemeral
        // as there would be no way to distinguish between derivatives generated
        // across multiple calls.
        return {ddwaf::object::clone(input.value), object_store::attribute::none};
    }
};

} // namespace ddwaf
